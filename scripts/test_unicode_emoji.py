#!/usr/bin/env python3
"""Test Unicode and emoji handling for Modal.com embedding endpoint"""

import requests
import json
import time
from typing import Dict, Any

# Modal endpoint
ENDPOINT = "https://podinsighthq--podinsight-embeddings-simple-generate-embedding.modal.run"

def test_unicode_query(test_name: str, query: str) -> Dict[str, Any]:
    """Test a single Unicode/emoji query"""
    print(f"\nüß™ Testing: {test_name}")
    print(f"   Query: {query}")
    print(f"   Length: {len(query)} chars")
    
    start_time = time.time()
    
    try:
        # Make request
        response = requests.post(
            ENDPOINT,
            json={"text": query},
            headers={"Content-Type": "application/json; charset=utf-8"},
            timeout=30
        )
        
        elapsed = time.time() - start_time
        
        result = {
            "test_name": test_name,
            "query": query,
            "status_code": response.status_code,
            "elapsed_time": elapsed,
            "success": False,
            "error": None,
            "embedding_dim": None
        }
        
        if response.status_code == 200:
            data = response.json()
            if "embedding" in data and isinstance(data["embedding"], list):
                result["embedding_dim"] = len(data["embedding"])
                result["success"] = result["embedding_dim"] == 768
                print(f"   ‚úÖ Status: {response.status_code}")
                print(f"   ‚úÖ Embedding dimension: {result['embedding_dim']}")
                # Show first few values to verify it's not all zeros
                first_values = data["embedding"][:5]
                print(f"   ‚úÖ First 5 values: {[f'{v:.4f}' for v in first_values]}")
            else:
                result["error"] = "Invalid response format"
                print(f"   ‚ùå Invalid response format")
        else:
            result["error"] = f"HTTP {response.status_code}: {response.text[:200]}"
            print(f"   ‚ùå Status: {response.status_code}")
            print(f"   ‚ùå Error: {response.text[:200]}")
            
        print(f"   ‚è±Ô∏è  Time: {elapsed:.2f}s")
        
    except Exception as e:
        elapsed = time.time() - start_time
        result = {
            "test_name": test_name,
            "query": query,
            "status_code": None,
            "elapsed_time": elapsed,
            "success": False,
            "error": str(e),
            "embedding_dim": None
        }
        print(f"   ‚ùå Exception: {str(e)}")
        print(f"   ‚è±Ô∏è  Time: {elapsed:.2f}s")
    
    return result

def main():
    print("=" * 80)
    print("üåç UNICODE & EMOJI HANDLING TEST")
    print("Testing Modal.com embedding endpoint with international characters")
    print("=" * 80)
    
    # Test cases with various Unicode and emoji
    test_cases = [
        # Emoji tests
        ("Single emoji", "ü¶Ñ"),
        ("Emoji with text", "ü¶Ñ startup valuations"),
        ("Multiple emojis", "üöÄüí∞üìà venture capital"),
        ("Emoji in sentence", "The startup raised üíµ $10M in Series A üéâ"),
        ("Complex emoji", "üë®‚Äçüíªüë©‚Äçüíª founders building AI ü§ñ"),
        
        # Latin scripts with accents
        ("French", "Les startups fran√ßaises l√®vent des fonds"),
        ("Spanish", "¬øC√≥mo evaluar startups en Am√©rica Latina?"),
        ("German", "Risikokapital f√ºr M√ºnchner Startups"),
        ("Portuguese", "Avalia√ß√£o de startups no Brasil"),
        
        # Non-Latin scripts
        ("Chinese (Simplified)", "Âàõ‰∏öÂÖ¨Âè∏‰º∞ÂÄºÊñπÊ≥ï"),
        ("Chinese (Traditional)", "ÂâµÊ•≠ÊäïË≥áÂü∫Èáë"),
        ("Japanese", "„Çπ„Çø„Éº„Éà„Ç¢„ÉÉ„Éó„ÅÆË©ï‰æ°ÊñπÊ≥ï"),
        ("Korean", "Ïä§ÌÉÄÌä∏ÏóÖ ÌèâÍ∞Ä Î∞©Î≤ï"),
        ("Arabic", "ÿ™ŸÇŸäŸäŸÖ ÿßŸÑÿ¥ÿ±ŸÉÿßÿ™ ÿßŸÑŸÜÿßÿ¥ÿ¶ÿ©"),
        ("Hebrew", "◊î◊¢◊®◊õ◊™ ◊°◊ò◊ê◊®◊ò◊ê◊§◊ô◊ù"),
        ("Russian", "–û—Ü–µ–Ω–∫–∞ —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤"),
        ("Greek", "ŒëŒæŒπŒøŒªœåŒ≥Œ∑œÉŒ∑ ŒΩŒµŒøœÜœÖœéŒΩ ŒµœÄŒπœáŒµŒπœÅŒÆœÉŒµœâŒΩ"),
        
        # Mixed scripts
        ("English + Chinese", "AI startup ‰∫∫Â∑•Êô∫ËÉΩÂàõ‰∏öÂÖ¨Âè∏"),
        ("Emoji + Japanese", "üöÄ „Çπ„Çø„Éº„Éà„Ç¢„ÉÉ„Éó ecosystem"),
        ("Multi-language", "Startup (Êñ∞Ââµ) funding ◊û◊ô◊û◊ï◊ü ÿ™ŸÖŸàŸäŸÑ"),
        
        # Special Unicode cases
        ("Right-to-left", "ŸÖÿ±ÿ≠ÿ®ÿß startup world"),
        ("Combining characters", "e\u0301 (√©) valuation"),
        ("Mathematical symbols", "Startup growth ‚Üí ‚àû"),
        ("Currency symbols", "Raised ‚Ç¨5M, ¬£4M, ¬•500M"),
        ("Arrows and symbols", "Growth ‚Üë üìä Revenue ‚ÜóÔ∏è"),
        
        # Edge cases
        ("Zalgo text", "SÃ∏tÃ∑aÃ∂rÃ¥tÃµuÃ∏pÃ∑ vÃ∂aÃ∏lÃ∑uÃ¥aÃµtÃ∂iÃ∏oÃ∑nÃ¥"),
        ("Box drawing", "‚îå‚îÄ Startup ‚îÄ‚îê ‚îÇ Funding ‚îÇ ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"),
        ("Musical notes", "‚ô™ ‚ô´ Startup symphony ‚ô¨ ‚ô≠"),
        ("Chess symbols", "‚ôî King of startups ‚ôï ‚ôñ ‚ôó ‚ôò"),
        ("Braille", "‚†é‚†û‚†Å‚†ó‚†û‚†•‚†è (startup in Braille)")
    ]
    
    results = []
    passed = 0
    failed = 0
    
    print("\nüìä Running Unicode/emoji tests...")
    
    for test_name, query in test_cases:
        result = test_unicode_query(test_name, query)
        results.append(result)
        
        if result["success"]:
            passed += 1
        else:
            failed += 1
        
        time.sleep(0.5)  # Small delay between requests
    
    # Summary
    print("\n" + "=" * 80)
    print("üìä TEST SUMMARY")
    print("=" * 80)
    
    print(f"\n‚úÖ Passed: {passed}/{len(test_cases)}")
    print(f"‚ùå Failed: {failed}/{len(test_cases)}")
    
    print("\nüìà Results by Category:")
    print("-" * 80)
    
    # Group results
    emoji_tests = results[:5]
    latin_tests = results[5:9]
    nonlatin_tests = results[9:17]
    mixed_tests = results[17:20]
    special_tests = results[20:25]
    edge_tests = results[25:]
    
    categories = [
        ("Emoji", emoji_tests),
        ("Latin with accents", latin_tests),
        ("Non-Latin scripts", nonlatin_tests),
        ("Mixed scripts", mixed_tests),
        ("Special Unicode", special_tests),
        ("Edge cases", edge_tests)
    ]
    
    for cat_name, cat_results in categories:
        cat_passed = sum(1 for r in cat_results if r["success"])
        cat_total = len(cat_results)
        print(f"\n{cat_name}: {cat_passed}/{cat_total} passed")
        for r in cat_results:
            status = "‚úÖ" if r["success"] else "‚ùå"
            print(f"  {status} {r['test_name']}: {r['embedding_dim'] or 'FAILED'}D")
    
    print("\nüéØ Expected Behavior:")
    print("- All Unicode inputs ‚Üí 768D embeddings")
    print("- Consistent performance across character sets")
    print("- No encoding errors or crashes")
    print("- Meaningful embeddings (not all zeros)")
    
    # Check for failures
    if failed > 0:
        print(f"\n‚ö†Ô∏è  {failed} TESTS FAILED:")
        for r in results:
            if not r["success"]:
                print(f"  - {r['test_name']}: {r['error']}")
    else:
        print("\n‚úÖ All Unicode/emoji tests passed successfully!")

if __name__ == "__main__":
    main()