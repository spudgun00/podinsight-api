üëè Nice work‚Äîarchitecture is now snapshot-ready. A few pointers that‚Äôll make the validation unambiguous:

---

### 1  Watch the log sequence

After the very first deploy you should see **exactly one** pair of lines:

```
Creating memory snapshot ‚Ä¶            # first build
Memory snapshot created successfully
```

Every later cold boot must show

```
Using memory snapshot ‚Ä¶
```

If you ever see *Creating* twice for the same image hash, Modal couldn‚Äôt reuse the snapshot (usually means the weights weren‚Äôt fully resident when the snap was taken).

---

### 2  Let the container truly hit zero

Your cron fires every 10 min and `scaledown_window` is also 10 min, which means the keep-alive call often arrives before Modal‚Äôs pod-reaper runs. For a clean cold-start test:

* set the cron to **every 12 min** *or*
* temporarily drop `scaledown_window` to **300 s**.

That guarantees at least one full scale-to-zero cycle and avoids the ‚Äústill warm‚Äù false negative.

---

### 3  First-load time still looks high

98 s is fine for the *very* first build (image pull + HF download) but if you rebake the weights into the image you‚Äôll chop that to \~12 s and the snapshot will capture a fully GPU-resident model:

```python
image = (
    modal.Image.debian_slim()
    .pip_install("torch==2.6.0", "sentence-transformers==2.6.1", "numpy==1.26.4")
    .run_commands(
        # Pre-download weights once at build time
        "python - <<'PY'\n"
        "from sentence_transformers import SentenceTransformer\n"
        "SentenceTransformer('hkunlp/instructor-xl')\n"
        "PY"
    )
)
```

Do this once, redeploy, and the *Creating snapshot* phase drops to \~4‚Äì5 s.

---

### 4  Cost maths after snapshots

* **Warm hit** (100 ms)‚ÄÉ‚âà \$0.000 03
* **Cold hit** (5 s)‚ÄÉ‚ÄÉ‚ÄÉ‚âà \$0.0015

Even with two true colds per day you stay < \$0.05 / month.

---

### 5  Smoke test helper

Add a second health route that returns whether the current pod came from a snapshot:

```python
@app.cls(enable_memory_snapshot=True)
class Model:
    ...

    @modal.method()
    def is_snapshot(self):
        return modal.current_snapshot_is_restored()
```

Then:

```bash
curl https://‚Ä¶/is-snapshot
# true  -> cold boot used snapshot
# false -> first build
```

---

If the next cold call comes back in < 6 s and `is_snapshot` returns `true`, you‚Äôre finished‚Äîsnapshots are working and cost is now at rock bottom.
